package com.sun.mongo;

import cn.hutool.core.lang.Console;
import cn.hutool.core.util.CharsetUtil;
import cn.hutool.crypto.symmetric.SymmetricAlgorithm;
import cn.hutool.crypto.symmetric.SymmetricCrypto;
import cn.hutool.json.JSONUtil;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;

import java.nio.charset.StandardCharsets;


@RunWith(SpringRunner.class)
@SpringBootTest
public class AESTest {

    @Test
    public void 加密() {
        String data = "testAES001";
        String secretKey = "5b6a4df4f8c54a3p";
        SymmetricCrypto aes = new SymmetricCrypto(SymmetricAlgorithm.AES, secretKey.getBytes(StandardCharsets.UTF_8));
        String s = aes.encryptHex(data);
        Console.log(s);
    }

    @Test
    public void 解密() {
        String data = "4e709688928c2099f103a255ba356f239875cd4535b93eae9e3d6618d621799800f321d64bac36b7fef6e4ace84a986a3b986a144ff28e3c591d11efc4d34eb57708ccdb83087eb988b56394844333b72c065aaaec453bc26b296a13875206ee7b38ba5654b4e8433285b14641df638c7c250c4a81f58306148eba85e593a277c8c8fab53ccc9cc20ec17f2a5568a8904d6b50003fd773073a8f32c846ce02b0eccf6189bca609422af7b7156be93e29cd59df20b38eadef330a58b6e6ff589c45678bf360212e78c9603d4d90ec185c0e61d345ffe8553a94d46ceb3e3d89065efef414d496498b642441138d7652cfa9a713dccf65d7cba209213b3615653ecc1b190f1db7bbf1000d9a5d12085b4ab6c6ba977a05d52a45f85950f9fd237b60a8895eeebabd5df11007798a5d34a81512ecd954972395f254fcfc972edd955036e3b75fb2ea786b281485387088d05ede130f3833e2c9b73f00c21b67473a4040c41a6487fa0e649153bc924f0e7d95205c4d3ff661213b75849aa18686f014d06c816be2ce2fcb69088e092e04de7a04865879cc4a74331d1e9e4777d99d8b592db513d499839713eaaf51f7ab98268dfb26ddfe9582558a3352e06044db51e01a79be3eb7ef758cdda16fc3c51c95ee416b0784d4ff5056d01a83924223a71eb4a6ed51a4b32234fbebe715db70d664dced93e8a9ca1fba04ba00c0741b353ab691e9385a9788e4f3052570367fe54bbbd3f9163137d04f7095ed2779b643caa684f39e111f82e7e43b27c33b54d6c4be3b88b49432da11462e5fb492c9e6a1a042581cc7ec8f5e046841e53a557ea64497c9baa332aba41ea1c4f1dd0d0cfe26b1913236c6cdcc45285da64e921dfd8a756c67baceccd69e85051e960f46233ea798cf316674ba053b0cb6edad55c2fcd5702b4449b5361432fdc4d55cbacf701de7fdd3323845b5568ebb2ccabcd291b9059562b26ded7bc948dec9d5d66cf8d557dfe9d8e88de2ae20c2a021b25ba3bc9789243a7db6bb8e5d1bfbfc6346df1951a5a77be177db709945c59a30894378a6c65743f2e9f6c143e2cc71137517881706994970c8941ac55ead2e3847a94ccae9862fb24294b4b649f360f682491d91fb491a5edf748fb3e9d2e3888e6800b84dfaa29cea06044fd01c86767b0c04b37ba0b5bc5e38e5debee2105ee3d06eed41aa3a5fd456c836fd318ab7e9ddfa4368d30812aa1b9891d72191cd20d919d8d0658152c3d61d1af929185f8b0c170f03b0934138ab6f697d67dfc60697cf5dd5d2dec997e20d503ced41fe4bb317dd3b213376066a98e848fc25200d78d0ea54f9b789aa8335d5f21b933a252d9a2768f679d712399b9b3f0288707411ad62624b60bcc31e6d305c0791b41dbbdee08c26419d63e94c18fc124f783063b140bd232c1b2fe6d697ad8f8bf4a35a17787e1040932623ff5c93ca8a2debb4e44dd12abe5fc05622e0432633489868d709a255f044bbb41058a57d08cfb23986e6bcbbfd0f84bd33174aa6892d3089f5d9e69bf6be6b16dbbf2b4ca1f708e9638972e2ac79403c2f998cc9824b926bcf783c142472fe8064a039021f30c6f76ed56cf69e5a20eb6e4d6bc3b28d0be7bc1a2bcc1a0529df2b5415302ddcd954951b2ae432ac5c4cc30aff59dfe4923e914889f564c9230491f4290d190da2847e1544778bfd9c84566061e03ad2665efd51c7f7876016d4e961797f9fde3c5844a08cfc907fcb12b5bd683e1edd100ba40c137de908b0d48814535d03f7899991bb60bcc3c703de8bc098a7ee02a61909e38ef4bd0a2a64df9af484d0cc7e25527a41a25802c2b703003de2ce3a83ee179240ac9809910ebcbcc8c828ed709c568e95f45a8ff95656682fc56bf20c3c4b27c6e6ab95ee7723ade300f81b4f6f94fd1920ef750889f69b8e920ff6242da43b3c2056a2e63fa3a910c72fe9774cd29bb9043948eaf85602f84bd76346df1951a5a77be177db709945c59a37603ef690847c4addcf3f85fabf7402d3eeee4c792cde9cfb24b67d0ac4d2e58ec892342976c45a53314c168cf110760f5da4584cb39d6c543b022e7f0f6b0461238e2c528194e8b2ad659a06a548bebca5381881610ef60905844c7e8b363c0f5da4584cb39d6c543b022e7f0f6b040b4d6e2774fb43be99bc360e9307de3cab69a8b0ccf0b71484f55899733bf2aa91ba831163718900cd0e14063af791f69f55b3dbbd2df2c12de06701d486841970528fe0b7f9568ca74b2af6d837db1bd46e1bd9d49ec5676884fa40fd7d8daf";
        String secretKey = "a68f4qd0ae3e6k6d";
        SymmetricCrypto aes = new SymmetricCrypto(SymmetricAlgorithm.AES, secretKey.getBytes(StandardCharsets.UTF_8));
        String s = aes.decryptStr(data, CharsetUtil.CHARSET_UTF_8);
        Console.log(s);
    }
    
}
